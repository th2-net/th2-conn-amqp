/*
 * Copyright 2020-2021 Exactpro (Exactpro Systems Limited)
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version "${kotlin_version}"
    id 'com.palantir.docker' version '0.25.0'
    id 'application'
}

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'com.palantir.docker'

ext {
    sharedDir = file("${project.rootDir}/shared")
}

group = 'com.exactpro.th2'
version = release_version

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
    maven {
        name 'Sonatype_snapshots'
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
        name 'Sonatype_releases'
        url 'https://s01.oss.sonatype.org/content/repositories/releases/'
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }
}

jar {
    manifest {
        attributes(
                'Created-By': "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                'Specification-Title': '',
                'Specification-Vendor': 'Exactpro Systems LLC',
                'Implementation-Title': project.archivesBaseName,
                'Implementation-Vendor': 'Exactpro Systems LLC',
                'Implementation-Vendor-Id': 'com.exactpro',
                'Implementation-Version': project.version
        )
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

// conditionals for publications
tasks.withType(PublishToMavenRepository) {
    onlyIf {
        (repository == publishing.repositories.nexusRepository &&
                project.hasProperty('nexus_user') &&
                project.hasProperty('nexus_password') &&
                project.hasProperty('nexus_url')) ||
                (repository == publishing.repositories.sonatype &&
                        project.hasProperty('sonatypeUsername') &&
                        project.hasProperty('sonatypePassword')) ||
                (repository == publishing.repositories.localRepo)
    }
}
tasks.withType(Sign) {
    onlyIf { project.hasProperty('signingKey') &&
            project.hasProperty('signingPassword')
    }
}
// disable running task 'initializeSonatypeStagingRepository' on a gitlab
tasks.whenTaskAdded {task ->
    if(task.name.equals('initializeSonatypeStagingRepository') &&
            !(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword'))
    ) {
        task.enabled = false
    }
}

dependencies {
    // BOM with external dependencies restrictions
    api platform('com.exactpro.th2:bom:3.1.0')

    // the library for interaction with infra API
    implementation "com.exactpro.th2:common:3.32.0"

    // Logging. All versions are specified in BOM dependency
    implementation "org.slf4j:slf4j-log4j12"
    implementation "org.slf4j:slf4j-api"

    // Idiomatic logging for Kotlin. Wraps slf4j
    implementation group: 'io.github.microutils', name: 'kotlin-logging', version: '2.0.4'

    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version

    // AMQP
    implementation group: 'org.apache.qpid', name: 'qpid-jms-client', version: '1.0.0'

    implementation 'io.prometheus:simpleclient'

    testImplementation "org.mockito.kotlin:mockito-kotlin:4.0.0"

    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
}

application {
    mainClassName 'com.exactpro.th2.conn.amqp.BoxMain'
}

applicationName = 'service'

distTar {
    archiveFileName.set("${applicationName}.tar")
}

dockerPrepare {
    dependsOn distTar
}

docker {
    copySpec.from(tarTree("$buildDir/distributions/${applicationName}.tar"))
}


compileKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
}