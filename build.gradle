plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.21'
    id 'com.palantir.docker' version '0.25.0'
    id 'application'
}

group 'com.exactpro.th2'
version release_version

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

compileKotlin {
    kotlinOptions {
        jvmTarget = "11"

    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}

repositories {
    mavenCentral()

    maven {
        name 'Bintray'
        url 'https://dl.bintray.com/exactpro/th2'
    }
}

dependencies {
    // BOM with external dependencies restrictions
    api platform('com.exactpro.th2:bom:3.0.0')

    // the library for interaction with infra API
    implementation 'com.exactpro.th2:common:3.14.0'

    // Logging. All versions are specified in BOM dependency
    implementation "org.slf4j:slf4j-log4j12"
    implementation "org.slf4j:slf4j-api"

    // Idiomatic logging for Kotlin. Wraps slf4j
    implementation 'io.github.microutils:kotlin-logging:2.0.4'

    implementation "org.jetbrains.kotlin:kotlin-stdlib"

    // AMQP
    implementation group: 'org.apache.qpid', name: 'qpid-jms-client', version: '1.0.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
}

jar {
    manifest {
        attributes(
                'Created-By':               "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                'Specification-Title':      '',
                'Specification-Vendor':     'Exactpro Systems LLC',
                'Implementation-Title':     project.archivesBaseName,
                'Implementation-Vendor':    'Exactpro Systems LLC',
                'Implementation-Vendor-Id': 'com.exactpro',
                'Implementation-Version':   project.version
        )
    }
}

application {
    mainClass.set('com.exactpro.th2.conn.amqp.BoxMain')
}

applicationName = 'service'

distTar {
    archiveFileName.set("${applicationName}.tar")
}

dockerPrepare {
    dependsOn distTar
}

docker {
    copySpec.from(tarTree("$buildDir/distributions/${applicationName}.tar"))
}